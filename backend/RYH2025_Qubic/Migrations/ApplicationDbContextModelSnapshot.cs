// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RYH2025_Qubic.Persistence;

#nullable disable

namespace RYH2025_Qubic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("raiseyourhack")
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RYH2025_Qubic.Models.ContractAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContractName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("SecurityAuditId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContractName");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SecurityAuditId");

                    b.ToTable("ContractAnalyses", "raiseyourhack");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.ContractMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractAnalysisId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FeesJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("InputStructJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsAssetRelated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrderBookRelated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OutputStructJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int?>("ProcedureIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ValidationsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ContractAnalysisId");

                    b.HasIndex("Name");

                    b.ToTable("ContractMethods", "raiseyourhack");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.SecurityAuditResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CompleteAnalysisResultId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContractName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RecommendationsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AuditDate");

                    b.ToTable("SecurityAuditResults", "raiseyourhack");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.SecurityRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FactorsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SecurityAuditResultId")
                        .HasColumnType("uuid");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("SecurityAuditResultId")
                        .IsUnique();

                    b.ToTable("SecurityRisks", "raiseyourhack");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.SecurityTestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActualRisk")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("ContractMethodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ExpectedBehavior")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MitigationStepsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("SecurityAuditResultId")
                        .HasColumnType("uuid");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TargetVariable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TestInputsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("VulnerabilityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ContractMethodId");

                    b.HasIndex("MethodName");

                    b.HasIndex("SecurityAuditResultId");

                    b.HasIndex("Severity");

                    b.HasIndex("TargetVariable");

                    b.ToTable("SecurityTestCases", "raiseyourhack");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.VulnerabilityFound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ExploitScenariosJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RecommendationsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("SecurityAuditResultId")
                        .HasColumnType("uuid");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SecurityAuditResultId");

                    b.HasIndex("Severity");

                    b.HasIndex("Type");

                    b.ToTable("VulnerabilitiesFound", "raiseyourhack");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.ContractAnalysis", b =>
                {
                    b.HasOne("RYH2025_Qubic.Models.SecurityAuditResult", "SecurityAudit")
                        .WithMany()
                        .HasForeignKey("SecurityAuditId");

                    b.Navigation("SecurityAudit");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.ContractMethod", b =>
                {
                    b.HasOne("RYH2025_Qubic.Models.ContractAnalysis", "ContractAnalysis")
                        .WithMany("Methods")
                        .HasForeignKey("ContractAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractAnalysis");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.SecurityRisk", b =>
                {
                    b.HasOne("RYH2025_Qubic.Models.SecurityAuditResult", "SecurityAuditResult")
                        .WithOne("OverallRisk")
                        .HasForeignKey("RYH2025_Qubic.Models.SecurityRisk", "SecurityAuditResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityAuditResult");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.SecurityTestCase", b =>
                {
                    b.HasOne("RYH2025_Qubic.Models.ContractMethod", "ContractMethod")
                        .WithMany("SecurityTestCases")
                        .HasForeignKey("ContractMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RYH2025_Qubic.Models.SecurityAuditResult", "SecurityAuditResult")
                        .WithMany("SecurityTests")
                        .HasForeignKey("SecurityAuditResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractMethod");

                    b.Navigation("SecurityAuditResult");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.VulnerabilityFound", b =>
                {
                    b.HasOne("RYH2025_Qubic.Models.SecurityAuditResult", "SecurityAuditResult")
                        .WithMany("Vulnerabilities")
                        .HasForeignKey("SecurityAuditResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityAuditResult");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.ContractAnalysis", b =>
                {
                    b.Navigation("Methods");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.ContractMethod", b =>
                {
                    b.Navigation("SecurityTestCases");
                });

            modelBuilder.Entity("RYH2025_Qubic.Models.SecurityAuditResult", b =>
                {
                    b.Navigation("OverallRisk")
                        .IsRequired();

                    b.Navigation("SecurityTests");

                    b.Navigation("Vulnerabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
